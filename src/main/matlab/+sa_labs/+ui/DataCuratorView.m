classdef DataCuratorView < appbox.View
    
    events
        BrowseLocation
        SelectedFilter
        SaveConfiguredFilter
        SelectedNodes
        SelectedEpochSignals
        SetEpochSignalConfigurationSetting
        UnlockEpochSignalConfigurationSettings
        SelectedPreProcessor
        ExecutePreProcessor
    end
    
    properties (Access = private)
        browseLocationButton
        locationField
        measurementTable
        availablefilterMenu
        filterNameField
        saveFilter
        infoText
        entityTree
        detailCardPanel
        availablePreProcessorFunctions
        executePreProcessorButton
        epochCard
    end
    
    methods
        
        function createUi(obj)
            import appbox.*;
            import sa_labs.ui.EntityNodeType;
            
            set(obj.figureHandle, ...
                'Name', 'Data Curator', ...
                'Position', screenCenter(800, 520));
            
            layout = uix.VBoxFlex(...
                'Parent', obj.figureHandle,...
                'Spacing', 1);
            curatorLayout = uix.Grid( ...
                'Parent', layout, ...
                'Spacing', 1);
            
            cellControlLayout = uix.VBox( ...
                'Parent', curatorLayout, ...
                'Padding', 5);
            
            cellInfoLayout = uix.HBox( ...
                'Parent', cellControlLayout, ...
                'Padding', 11);
            Label( ...
                'Parent', cellInfoLayout, ...
                'String', 'H5 File Location:');
            obj.locationField = uicontrol( ...
                'Parent', cellInfoLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.browseLocationButton = uicontrol( ...
                'Parent', cellInfoLayout, ...
                'Style', 'pushbutton', ...
                'String', '...', ...
                'Callback', @(h,d)notify(obj, 'BrowseLocation'));
            set(cellInfoLayout, 'Widths', [100 -1 100]);
            
            filterSelectorLayout = uix.HBox( ...
                'Parent', cellControlLayout, ...
                'Padding', 11);
            Label( ...
                'Parent', filterSelectorLayout, ...
                'String', 'Select Filter:');
            obj.availablefilterMenu = MappedPopupMenu( ...
                'Parent', filterSelectorLayout, ...
                'String', {' '}, ...
                'HorizontalAlignment', 'left', ...
                'Callback', @(h,d)notify(obj, 'SelectedFilter'));
            set(filterSelectorLayout, 'Widths', [100 -1]);
            
            obj.measurementTable = uiextras.jTable.Table(...
                'Parent', cellControlLayout,...
                'ColumnEditable', [true true true],...
                'ColumnName', {'Property','Condition', 'Value'},...
                'ColumnFormat', {'popup', 'char', 'popupcheckbox'},...
                'ColumnPreferredWidth', [40 20 100]);
            
            filterControlsLayout = uix.HBox( ...
                'Parent', cellControlLayout, ...
                'Padding', 11);
            Label( ...
                'Parent', filterControlsLayout, ...
                'String', 'Filter Name:');
            obj.filterNameField = uicontrol( ...
                'Parent', filterControlsLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.saveFilter = uicontrol( ...
                'Parent', filterControlsLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Save Filter', ...
                'Callback', @(h,d)notify(obj, 'SaveConfiguredFilter'));
            set(filterControlsLayout, 'Widths', [100 200 -1]);
            
            set(cellControlLayout, 'Heights', [45 45 -1 45]);
            
            infoLayout =  uix.VBox( ...
                'Parent', curatorLayout, ...
                'Padding', 5);
            Label( ...
                'Parent', infoLayout, ...
                'String', 'Results:');
            obj.infoText = TextArea( ...
                'Parent', infoLayout,...
                'Scrollable', true);
            set(infoLayout, 'Heights', [30 -1]);
            set(curatorLayout,...
                'Heights', [-1, -4],...
                'Widths', [500, -1])
            
            mainLayout = uix.HBoxFlex( ...
                'Parent', layout, ...
                'DividerMarkings', 'off', ...
                'DividerBackgroundColor', [160/255 160/255 160/255], ...
                'padding', 5);
            
            masterLayout = uix.HBox( ...
                'Parent', mainLayout,...
                'padding', 11);
            obj.entityTree = uiextras.jTree.Tree( ...
                'Parent', masterLayout, ...
                'FontName', get(obj.figureHandle, 'DefaultUicontrolFontName'), ...
                'FontSize', get(obj.figureHandle, 'DefaultUicontrolFontSize'), ...
                'BorderType', 'none', ...
                'SelectionChangeFcn', @(h,d)notify(obj, 'SelectedNodes'), ...
                'SelectionType', 'discontiguous');
            root = obj.entityTree.Root;
            set(root, 'Value', struct('entity', [], 'type', EntityNodeType.EXPERIMENT));
            
            cells = uiextras.jTree.TreeNode( ...
                'Parent', root, ...
                'Name', 'Cells', ...
                'Value', struct('entity', [], 'type', EntityNodeType.CELLS));
            
            detailLayout = uix.VBox( ...
                'Parent', mainLayout, ...
                'Padding', 11);
            
            obj.detailCardPanel = uix.CardPanel( ...
                'Parent', detailLayout);
            
            % Epoch card.
            epochLayout = uix.VBox( ...
                'Parent', obj.detailCardPanel, ...
                'Spacing', 7);
            signalLayout = uix.HBox( ...
                'Parent', epochLayout, ...
                'Spacing', 5);
            signalMasterLayout = uix.VBox( ...
                'Parent', signalLayout);
            obj.epochCard.signalListBox = MappedListBox( ...
                'Parent', signalMasterLayout, ...
                'Max', 10, ...
                'Min', 1, ...
                'Enable', 'off', ...
                'Callback', @(h,d)notify(obj, 'SelectedEpochSignals'));
            
            signalPreProcessingLayout = uix.VBox( ...
                'Parent', signalMasterLayout);
            Label( ...
                'Parent', signalPreProcessingLayout, ...
                'String', 'Functions:');
            
            obj.availablePreProcessorFunctions = MappedPopupMenu( ...
                'Parent', signalPreProcessingLayout, ...
                'String', {' '}, ...
                'HorizontalAlignment', 'left', ...
                'Callback', @(h,d)notify(obj, 'SelectedPreProcessor'));
            signalDetailLayout = uix.VBox( ...
                'Parent', signalLayout, ...
                'Spacing', 5);
            obj.epochCard.panel = uipanel( ...
                'Parent', signalDetailLayout, ...
                'BorderType', 'line', ...
                'HighlightColor', [130/255 135/255 144/255], ...
                'BackgroundColor', 'w');
            obj.epochCard.axes = axes( ...
                'Parent', obj.epochCard.panel);
            yyaxis(obj.epochCard.axes, 'right');
            set(obj.epochCard.axes, 'YColor', 'black');
            yyaxis(obj.epochCard.axes, 'left');
            set(obj.epochCard.axes, 'YColor', 'black');
            obj.epochCard.grid = uiextras.jide.PropertyGrid(signalPreProcessingLayout, ...
                'Enable', false, ...
                'Callback', @(h,d)notify(obj, 'SetEpochSignalConfigurationSetting', symphonyui.ui.UiEventData(d)));
            signalConfigurationMenu = uicontextmenu('Parent', obj.figureHandle);
            uimenu( ...
                'Parent', signalConfigurationMenu, ...
                'Label', 'Unlock', ...
                'Callback', @(h,d)notify(obj, 'UnlockEpochSignalConfigurationSettings'));
            set(obj.epochCard.grid, 'UIContextMenu', signalConfigurationMenu);
            obj.executePreProcessorButton = uicontrol( ...
                'Parent', signalPreProcessingLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Execute', ...
                'Callback', @(h,d)notify(obj, 'ExecutePreProcessor'));
            
            set(signalPreProcessingLayout, 'Heights', [30 40 -1 30]);
            set(signalLayout, 'Widths', [-1 -4]);
            set(mainLayout, 'Widths', [-1 -3]);
            set(layout, 'Heights', [300 -1]);
        end
        
        function n = addEpochNode(obj, parent, name, entity)
            value.entity = entity;
            value.type = symphonyui.ui.views.EntityNodeType.EPOCH;
            n = uiextras.jTree.TreeNode( ...
                'Parent', parent, ...
                'Name', name, ...
                'Value', value);
            n.setIcon(symphonyui.app.App.getResource('icons', 'epoch.png'));
            menu = uicontextmenu('Parent', obj.figureHandle);
            menu = obj.addEntityContextMenus(menu);
            set(n, 'UIContextMenu', menu);
        end
        
        function clearEpochDataAxes(obj)
            yyaxis(obj.epochCard.axes, 'left');
            cla(obj.epochCard.axes);
            yyaxis(obj.epochCard.axes, 'right');
            cla(obj.epochCard.axes);
            legend(obj.epochCard.axes, 'off');
        end
        
        function setEpochDataXLabel(obj, label)
            xlabel(obj.epochCard.axes, label, ...
                'Interpreter', 'tex');
        end
        
        function setEpochDataYLabel(obj, label, lr)
            if nargin < 3
                lr = 'left';
            end
            yyaxis(obj.epochCard.axes, lr);
            ylabel(obj.epochCard.axes, label, ...
                'Interpreter', 'tex');
        end
        
        function setEpochDataYAxisVisible(obj, tf, lr)
            if nargin < 3
                lr = 'left';
            end
            yaxis = get(obj.epochCard.axes, 'YAxis');
            if strcmp(lr, 'left')
                i = 1;
            elseif strcmp(lr, 'right')
                i = 2;
            else
                error('lr must be left or right');
            end
            set(yaxis(i), 'Visible', appbox.onOff(tf));
        end
        
        function addEpochDataLine(obj, x, y, color, lr)
            if nargin < 5
                lr = 'left';
            end
            yyaxis(obj.epochCard.axes, lr);
            line(x, y, 'Parent', obj.epochCard.axes, 'Color', color);
        end
        
        function addEpochDataLegend(obj, str)
            legend(obj.epochCard.axes, str);
        end
        
        function enableSelectEpochSignal(obj, tf)
            set(obj.epochCard.signalListBox, 'Enable', appbox.onOff(tf));
        end
        
        function s = getSelectedEpochSignals(obj)
            s = get(obj.epochCard.signalListBox, 'Value');
        end
        
        function setEpochSignalList(obj, names, values)
            set(obj.epochCard.signalListBox, 'String', names);
            set(obj.epochCard.signalListBox, 'Values', values);
        end
        
        function enableEpochSignalConfiguration(obj, tf)
            set(obj.epochCard.grid, 'Enable', tf);
        end
        
        function setEpochSignalConfiguration(obj, fields)
            set(obj.epochCard.grid, 'Properties', fields);
        end
        
        function updateEpochSignalConfiguration(obj, fields)
            obj.epochCard.grid.UpdateProperties(fields);
        end
        
        function n = getNodeName(obj, node) %#ok<INUSL>
            n = get(node, 'Name');
        end
        
        function setNodeName(obj, node, name) %#ok<INUSL>
            set(node, 'Name', name);
        end
        
        function i = getNodeIndex(obj, node) %#ok<INUSL>
            i = find(node.Parent.Children == node, 1);
        end
        
        function setNodeTooltip(obj, node, t) %#ok<INUSL>
            set(node, 'TooltipString', t);
        end
        
        function e = getNodeEntity(obj, node) %#ok<INUSL>
            v = get(node, 'Value');
            e = v.entity;
        end
        
        function t = getNodeType(obj, node) %#ok<INUSL>
            v = get(node, 'Value');
            t = v.type;
        end
        
        function removeNode(obj, node) %#ok<INUSL>
            node.delete();
        end
        
        function collapseNode(obj, node) %#ok<INUSL>
            node.collapse();
        end
        
        function expandNode(obj, node) %#ok<INUSL>
            node.expand();
        end
        
        function nodes = getSelectedNodes(obj)
            nodes = obj.entityTree.SelectedNodes;
        end
        
        function setSelectedNodes(obj, nodes)
            obj.entityTree.SelectedNodes = nodes;
        end
    end
end
