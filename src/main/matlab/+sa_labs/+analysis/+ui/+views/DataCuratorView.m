classdef DataCuratorView < appbox.View
    
    events
        LoadH5File
        SelectedFilter
        ReParse
        SelectedNodes
        SelectedEpochSignals
        SetPreProcessorParameters
        UnlockEpochSignalConfigurationSettings
        SelectedPreProcessor
        ExecutePreProcessor
        SaveConfiguredFilter
        AddKeyValue
        SelectedDeleteParameters
        DeleteKeys
    end
    
    properties (Access = private)
        h5FileName
        loadH5FileButton
        reparseButton
        measurementTable
        availablefilterMenu
        filterNameField
        saveFilter
        infoText
        entityTree
        cellFolderNode
        detailCardPanel
        availablePreProcessorFunctions
        preProcessorPropertyGrid
        executePreProcessorButton
        availableSignals
        plotCard
        keyField1
        valueField1
        keyField2
        valueField2
        keyField3
        valueField3
        addKeyValueButton
        deleteParmeterListBox
        deleteKeysButton
    end
    
    methods
        
        function createUi(obj)
            import appbox.*;
            import sa_labs.analysis.ui.views.EntityNodeType;
            
            set(obj.figureHandle, ...
                'Name', 'Data Curator', ...
                'Position', screenCenter(800, 520));
            
            layout = uix.VBoxFlex(...
                'Parent', obj.figureHandle,...
                'Spacing', 1);
            
            cellInfoLayout = uix.HBox( ...
                'Parent', layout, ...
                'Padding', 11);
            Label( ...
                'Parent', cellInfoLayout, ...
                'String', 'H5 File Name:');
            obj.h5FileName = uicontrol( ...
                'Parent', cellInfoLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.loadH5FileButton = uicontrol( ...
                'Parent', cellInfoLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Load', ...
                'Callback', @(h,d)notify(obj, 'LoadH5File'));
            uix.Empty('Parent', cellInfoLayout);
            obj.reparseButton = uicontrol( ...
                'Parent', cellInfoLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Re-Parse', ...
                'Callback', @(h,d)notify(obj, 'ReParse'));
            Label( ...
                'Parent', cellInfoLayout, ...
                'String', '  Select Filter:');
            obj.availablefilterMenu = MappedPopupMenu( ...
                'Parent', cellInfoLayout, ...
                'String', {' '}, ...
                'HorizontalAlignment', 'left', ...
                'Callback', @(h,d)notify(obj, 'SelectedFilter'));

            uix.Empty('Parent', cellInfoLayout);
            set(cellInfoLayout, 'Widths', [100 -1 100 10 100 100 -1 -3]);
                       
            mainLayout = uix.HBoxFlex( ...
                'Parent', layout, ...
                'DividerMarkings', 'off', ...
                'DividerBackgroundColor', [160/255 160/255 160/255], ...
                'padding', 5);
            
            masterLayout = uix.HBox( ...
                'Parent', mainLayout,...
                'padding', 11);
            
            obj.entityTree = uiextras.jTree.Tree( ...
                'Parent', masterLayout, ...
                'FontName', get(obj.figureHandle, 'DefaultUicontrolFontName'), ...
                'FontSize', get(obj.figureHandle, 'DefaultUicontrolFontSize'), ...
                'SelectionChangeFcn', @(h,d)notify(obj, 'SelectedNodes'), ...
                'SelectionType', 'discontiguous');

            root = obj.entityTree.Root;
            set(root, 'Value', struct('entity', [], 'type', EntityNodeType.EXPERIMENT));
            
            cells = uiextras.jTree.TreeNode( ...
                'Parent', root, ...
                'Name', 'Cells', ...
                'Value', struct('entity', [], 'type', EntityNodeType.CELLS));
            obj.cellFolderNode = cells;

            detailLayout = uix.VBox( ...
                'Parent', mainLayout, ...
                'Padding', 11);
            
            obj.detailCardPanel = uix.CardPanel( ...
                'Parent', detailLayout);
            
            % Epoch card.
            epochLayout = uix.VBox( ...
                'Parent', obj.detailCardPanel, ...
                'Spacing', 7);
            signalLayout = uix.HBox( ...
                'Parent', epochLayout, ...
                'Spacing', 5);
            signalMasterLayout = uix.VBox( ...
                'Parent', signalLayout);
            
            obj.availableSignals = MappedListBox( ...
                'Parent', signalMasterLayout, ...
                'Max', 5, ...
                'Min', 1, ...
                'Enable', 'off', ...
                'Callback', @(h,d)notify(obj, 'SelectedPreProcessor'));
            signalPreProcessingLayout = uix.VBox( ...
                'Parent', signalMasterLayout);
            
            Label( ...
                'Parent', signalPreProcessingLayout, ...
                'String', 'Functions:');
            obj.availablePreProcessorFunctions = MappedListBox( ...
                'Parent', signalPreProcessingLayout, ...
                'Max', 5, ...
                'Min', 1, ...
                'Enable', 'off', ...
                'Callback', @(h,d)notify(obj, 'SelectedPreProcessor'));
            
            signalDetailLayout = uix.VBox( ...
                'Parent', signalLayout, ...
                'Spacing', 5);
            obj.plotCard.panel = uipanel( ...
                'Parent', signalDetailLayout, ...
                'BorderType', 'line', ...
                'HighlightColor', [130/255 135/255 144/255], ...
                'BackgroundColor', 'w');
            obj.plotCard.axes = axes( ...
                'Parent', obj.plotCard.panel);
            yyaxis(obj.plotCard.axes, 'right');
            set(obj.plotCard.axes, 'YColor', 'black');
            yyaxis(obj.plotCard.axes, 'left');
            set(obj.plotCard.axes, 'YColor', 'black');

            obj.preProcessorPropertyGrid = uiextras.jide.PropertyGrid(signalPreProcessingLayout, ...
                'Enable', false, ...
                'Callback', @(h,d)notify(obj, 'SetPreProcessorParameters'));
            obj.executePreProcessorButton = uicontrol( ...
                'Parent', signalPreProcessingLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Execute', ...
                'Callback', @(h,d)notify(obj, 'ExecutePreProcessor'));
            set(signalMasterLayout, 'Heights', [-1 -2]);            
            set(signalPreProcessingLayout, 'Heights', [30 -1  -1 30]);
            set(signalLayout, 'Widths', [-1 -7]);
            set(mainLayout, 'Widths', [-1 -5]);
            
            curatorLayout = uix.HBox( ...
                'Parent', layout, ...
                'Spacing', 1);
            
            cellControlLayout = uix.VBox( ...
                'Parent', curatorLayout, ...
                'Padding', 5);            
            filterSelectorLayout = uix.HBox( ...
                'Parent', cellControlLayout, ...
                'Padding', 11);
            Label( ...
                'Parent', filterSelectorLayout, ...
                'String', 'Create Filter:');
            uix.Empty('Parent', filterSelectorLayout);
            set(filterSelectorLayout, 'Widths', [100 -1]);
            
            obj.measurementTable = uiextras.jTable.Table(...
                'Parent', cellControlLayout,...
                'ColumnEditable', [true true true],...
                'ColumnName', {'Property','Condition', 'Value'},...
                'ColumnFormat', {'popup', 'char', 'popupcheckbox'},...
                'ColumnPreferredWidth', [40 20 100]);
            
            filterControlsLayout = uix.HBox( ...
                'Parent', cellControlLayout, ...
                'Padding', 11);
            Label( ...
                'Parent', filterControlsLayout, ...
                'String', 'Filter Name:');
            obj.filterNameField = uicontrol( ...
                'Parent', filterControlsLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.saveFilter = uicontrol( ...
                'Parent', filterControlsLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Save Filter', ...
                'Callback', @(h,d)notify(obj, 'SaveConfiguredFilter'));
            set(filterControlsLayout, 'Widths', [100 200 -1]);
            set(cellControlLayout, 'Heights', [45 -1 45]);
            
            addParameterLayout =  uix.Grid( ...
                'Parent', curatorLayout, ...
                'Padding', 11);
            Label( ...
                'Parent', addParameterLayout, ...
                'String', 'Key1:');
            Label( ...
                'Parent', addParameterLayout, ...
                'String', 'Value1:');
            Label( ...
                'Parent', addParameterLayout, ...
                'String', 'Key2:');
            Label( ...
                'Parent', addParameterLayout, ...
                'String', 'Value2:');
            Label( ...
                'Parent', addParameterLayout, ...
                'String', 'Key3:');
            Label( ...
                'Parent', addParameterLayout, ...
                'String', 'Value3:');
            
            uix.Empty('Parent', addParameterLayout);
            obj.keyField1 = uicontrol( ...
                'Parent', addParameterLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.valueField1 = uicontrol( ...
                'Parent', addParameterLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.keyField2 = uicontrol( ...
                'Parent', addParameterLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.valueField2 = uicontrol( ...
                'Parent', addParameterLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.keyField3 = uicontrol( ...
                'Parent', addParameterLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            obj.valueField3 = uicontrol( ...
                'Parent', addParameterLayout, ...
                'Style', 'edit', ...
                'HorizontalAlignment', 'left');
            
            obj.addKeyValueButton = uicontrol( ...
                'Parent', addParameterLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Add Parameters', ...
                'Callback', @(h,d)notify(obj, 'AddKeyValue'));
            
            set(addParameterLayout,...
                'Widths', [-1, -3]);
           
            deleteParameterLayout =  uix.VBox( ...
                'Parent', curatorLayout, ...
                'Padding', 5);
            obj.deleteParmeterListBox = MappedListBox( ...
                'Parent', deleteParameterLayout, ...
                'Max', 10, ...
                'Min', 1, ...
                'Enable', 'off', ...
                'Callback', @(h,d) notify(obj, 'SelectedDeleteParameters'));
            obj.deleteKeysButton = uicontrol( ...
                'Parent', deleteParameterLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Delete Parameters', ...
                'Callback', @(h,d)notify(obj, 'DeleteKeys'));
            set(deleteParameterLayout,...
                'Heights', [-5, -1]);
            
            consoleLayout =  uix.VBox( ...
                'Parent', curatorLayout, ...
                'Padding', 5);
            Label( ...
                'Parent', consoleLayout, ...
                'String', 'Results:');
            obj.infoText = TextArea( ...
                'Parent', consoleLayout,...
                'Scrollable', true);
            set(consoleLayout, 'Heights', [30 -1]);
            set(curatorLayout, 'Widths', [-2, -1, -1, -3])
            
            set(layout, 'Heights', [50 -3 -1]);
        end
        
        function path = getH5FileLocation(obj)
            path = get(obj.h5FileName, 'String');
        end

        function setExperimentNode(obj, name, entity)
            value = get(obj.entityTree.Root, 'Value');
            value.entity = entity;
            set(obj.entityTree.Root, ...
                'Name', name, ...
                'Value', value);
        end

        function n = addCellDataNode(obj, parent, name, entity)
            value.entity = entity;
            value.type = sa_labs.analysis.ui.views.EntityNodeType.CELLS;
            n = uiextras.jTree.TreeNode( ...
                'Parent', parent, ...
                'Name', name, ...
                'Value', value);
        end

        function node = getCellFolderNode(obj)
            node = obj.cellFolderNode;
        end

        function n = addEpochDataNode(obj, parent, name, entity)
            value.entity = entity;
            value.type = sa_labs.analysis.ui.views.EntityNodeType.EPOCH;
            n = uiextras.jTree.TreeNode( ...
                'Parent', parent, ...
                'Name', name, ...
                'Value', value);
            % n.setIcon(symphonyui.app.App.getResource('icons', 'epoch.png'));
            % menu = uicontextmenu('Parent', obj.figureHandle);
            % menu = obj.addEntityContextMenus(menu);
            % set(n, 'UIContextMenu', menu);
        end

        function loadCellDataFilters(obj, filterNames)
            set(obj.availablefilterMenu, 'String', filterNames); 
        end

        function clearEpochDataAxes(obj)
            yyaxis(obj.plotCard.axes, 'left');
            cla(obj.plotCard.axes);
            yyaxis(obj.plotCard.axes, 'right');
            cla(obj.plotCard.axes);
            legend(obj.plotCard.axes, 'off');
        end
        
        function setEpochDataXLabel(obj, label)
            xlabel(obj.plotCard.axes, label, ...
                'Interpreter', 'tex');
        end
        
        function setEpochDataYLabel(obj, label, lr)
            if nargin < 3
                lr = 'left';
            end
            yyaxis(obj.plotCard.axes, lr);
            ylabel(obj.plotCard.axes, label, ...
                'Interpreter', 'tex');
        end
        
        function setEpochDataYAxisVisible(obj, tf, lr)
            if nargin < 3
                lr = 'left';
            end
            yaxis = get(obj.plotCard.axes, 'YAxis');
            if strcmp(lr, 'left')
                i = 1;
            elseif strcmp(lr, 'right')
                i = 2;
            else
                error('lr must be left or right');
            end
            set(yaxis(i), 'Visible', appbox.onOff(tf));
        end
        
        function addEpochDataLine(obj, x, y, color, lr)
            if nargin < 5
                lr = 'left';
            end
            yyaxis(obj.plotCard.axes, lr);
            line(x, y, 'Parent', obj.plotCard.axes, 'Color', color);
        end
        
        function addEpochDataLegend(obj, str)
            legend(obj.plotCard.axes, str);
        end
        
        function enableSelectEpochSignal(obj, tf)
            set(obj.plotCard.signalListBox, 'Enable', appbox.onOff(tf));
        end
        
        function s = getSelectedEpochSignals(obj)
            s = get(obj.plotCard.signalListBox, 'Value');
        end
        
        function setEpochSignalList(obj, names, values)
            set(obj.plotCard.signalListBox, 'String', names);
            set(obj.plotCard.signalListBox, 'Values', values);
        end
        
        function enableEpochSignalConfiguration(obj, tf)
            set(obj.plotCard.grid, 'Enable', tf);
        end
        
        function setEpochSignalConfiguration(obj, fields)
            set(obj.plotCard.grid, 'Properties', fields);
        end
        
        function updateEpochSignalConfiguration(obj, fields)
            obj.plotCard.grid.UpdateProperties(fields);
        end
        
        function n = getNodeName(obj, node) %#ok<INUSL>
            n = get(node, 'Name');
        end
        
        function setNodeName(obj, node, name) %#ok<INUSL>
            set(node, 'Name', name);
        end
        
        function i = getNodeIndex(obj, node) %#ok<INUSL>
            i = find(node.Parent.Children == node, 1);
        end
        
        function setNodeTooltip(obj, node, t) %#ok<INUSL>
            set(node, 'TooltipString', t);
        end
        
        function e = getNodeEntity(obj, node) %#ok<INUSL>
            v = get(node, 'Value');
            e = v.entity;
        end
        
        function t = getNodeType(obj, node) %#ok<INUSL>
            v = get(node, 'Value');
            t = v.type;
        end
        
        function removeNode(obj, node) %#ok<INUSL>
            node.delete();
        end
        
        function collapseNode(obj, node) %#ok<INUSL>
            node.collapse();
        end
        
        function expandNode(obj, node) %#ok<INUSL>
            node.expand();
        end
        
        function nodes = getSelectedNodes(obj)
            nodes = obj.entityTree.SelectedNodes;
        end
        
        function setSelectedNodes(obj, nodes)
            obj.entityTree.SelectedNodes = nodes;
        end
    end
end
